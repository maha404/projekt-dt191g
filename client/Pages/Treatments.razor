@page "/tidsbokning"
@inject HttpClient http
@inject NavigationManager NavManager

<PageTitle>Tidsbokning</PageTitle>

<div>
    <Breadcrumb style="--bs-breadcrumb-divider: '>';" Items="NavItems1"></Breadcrumb>
</div>

@if(showModal) 
{
    @foreach(var item in treatment)
    {
        <div class="modals">
            <CustomModal Title=@item.Name Message=@($"{item.Description}") OnClose="CloseModal"/>
        </div>
    }
}

@if (treatmentInfo != null && treatmentInfo.Any())
{
    // Gruppera behandlingarna efter behandlingstypsnamnet
    var groupedTreatments = treatmentInfo.GroupBy(t => t.TreatmentTypeName);

    @foreach (var group in groupedTreatments)
    {
    <div>
        <button class="collapse-btn" data-toggle="collapse" data-target="#@($"collapse-{group.Key}")" aria-expanded="false" aria-controls="@($"collapse-{group.Key}")">
            <p>@group.Key</p>
        </button>
        <article class="collapse" id="@($"collapse-{group.Key}")">
            @foreach (var treatment in group)
            {
                <div class="collapse-contents">
                    <div class="text-container">
                        <p>@treatment.Name</p>
                        <p>Pris - @treatment.Price kr</p>
                    </div>
                    <div class="btn-container">
                        <div class="btns">
                            <button class="contents-btn" @onclick="() => Info(treatment.Id)">Mer info</button>
                            <button class="contents-btn" @onclick="() => BookTreatment(treatment.Id)">Boka</button>
                        </div>
                    </div>
                </div>
            }
        </article>
    </div>
    }
}


@code {

    private bool showModal = false;
   

    private List<Treatment>? treatmentInfo;
    private SingleTreatment[]? treatment;

    private List<BreadcrumbItem> NavItems1 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Hämta datan från API:t
        treatmentInfo = await http.GetFromJsonAsync<List<Treatment>>("http://localhost:5244/api/treatments/with-type");
        
        NavItems1 = new List<BreadcrumbItem>
        {
            new BreadcrumbItem{ Text = "Startsidan", Href ="/" },
            new BreadcrumbItem{ Text = "Tidsbokning", IsCurrentPage = true }
        };
    }

    private void BookTreatment(int id)
    {
        // Skapa en query-string med behandlings-ID
        var queryString = $"id={id}";

        // Navigera till boka-sidan med query-string
        NavManager.NavigateTo($"/tidsbokning/boka?{queryString}");
    }

   private async Task Info(int id)
   {
     treatment = new SingleTreatment [] { await http.GetFromJsonAsync<SingleTreatment>($"http://localhost:5244/api/treatments/{id}") };
     showModal = true;
   }

    private void CloseModal()
    {
        showModal = false;
    }

    public class Treatment
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public TimeSpan? TreatmentType { get; set; }
        public int Price { get; set; }
        public int TreatmentTypeId { get; set; }
        public string TreatmentTypeName { get; set; }
    }

    public class SingleTreatment
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public int Price { get; set; }
        public int TreatmentTypeId { get; set; }
        public string TreatmentTypeName { get; set; }
    }

}
