@page "/avboka"
@inject HttpClient http
@using Newtonsoft.Json;
@using System.Text;

<PageTitle>Avboka</PageTitle>

<div class="header-text">
    <h1>Avboka</h1>
</div>

<div>
    <Breadcrumb style="--bs-breadcrumb-divider: '>';" Items="NavItems1"></Breadcrumb>
</div> 

<article class="cancel-article">
    <h2>Avboka din behandling här</h2>
    <p>Här kan du avboka din behandling hos oss, ange namn, telefonummer och bokningsnummer på din bokning för att avboka. Du kan även ringa till oss för att avboka din behandling genom att ringa eller kontakta oss via formuläret .</p>
</article>

<div class="cancel-container">
<form class="form">
    <label for="bokingnum">Bokningsnummer</label>
    <input type="number" @bind="bookingId" placeholder="Ditt bokningsnummer">

    <br>
    <label for="">Namn på bokningen</label>
    <input type="text" @bind="CustomerName">
    <br>
    <br>
    <label for="">Telefonnummret på bokningen</label>
    <input type="text" @bind="CustomerPhone">
    <br>
    <br>
</form>
<br>
<button @onclick="Cancel" class="cancel-btn">Avboka</button>
<br>
@if(!string.IsNullOrEmpty(SuccessMessage))
{
    <p class="succmsg">@SuccessMessage</p>
}
@if(!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="errormsg">@ErrorMessage</p>
}
</div>


@code {

    private int bookingId;
    private string CustomerName;
    private string CustomerPhone;
    private string ErrorMessage;
    private string SuccessMessage;
    private BookingModel model = new BookingModel();
    private List<BreadcrumbItem> NavItems1 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavItems1 = new List<BreadcrumbItem>
        {
            new BreadcrumbItem{ Text = "Startsidan", Href ="/" },
            new BreadcrumbItem{ Text = "Avboka", IsCurrentPage = true }
        };
    }
    private async Task Cancel()
    {
        try 
        {
            model.Id = bookingId;
            model.Name = CustomerName;
            model.PhoneNumber = CustomerPhone;

            var jsonContent = new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, "application/json");

            var request = new HttpRequestMessage(HttpMethod.Delete, $"http://localhost:5244/api/booking/{bookingId}")
            {
                Content = jsonContent
            };

            var response = await http.SendAsync(request);

            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ErrorMessage = "Bokningsnumret är inkorrekt";
            }
            else if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "Vänligen dubbelkolla uppgifterna";
            }
            else
            {
                SuccessMessage = "Bokning avbokad framgångsrikt.";
                ErrorMessage = "";
            }
        }
        catch (Exception ex)
        {
            // Handle general exceptions
            Console.WriteLine($"Fel vid avbokning: {ex.Message}");
        }
    }

    public class BookingModel
    {
        public int Id { get; set; }
        public int TreatmentId { get; set; }
        public DateTime DateTime { get; set; }
        public string Name { get; set; }
        public string PhoneNumber { get; set; }
        public bool Status { get; set; } = false;
    }
}
